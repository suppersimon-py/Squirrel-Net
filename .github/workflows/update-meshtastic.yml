```yaml
name: Build SquirrelCore Firmware

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip git jq
          pip3 install --upgrade platformio

      - name: Get latest Meshtastic release
        id: get_version
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e

          # Get latest non-dev, non-revoked, Beta (stable)
          RELEASE=$(gh release list --repo meshtastic/firmware --limit 50 --exclude-pre-releases --json tagName,name \
            | jq -r '.[] | select(.tagName | test("dev") | not) | select(.name | test("\\(Revoked\\)") | not) | select(.name | test("Beta")) | .tagName' | head -n1)

          if [ -z "$RELEASE" ]; then
            echo "Error: Could not determine latest Meshtastic release!"
            exit 1
          fi

          echo "Latest Meshtastic release: $RELEASE"
          echo "meshtastic_version=$RELEASE" >> $GITHUB_OUTPUT

          # Download source if available, ignore failure
          gh release download "$RELEASE" --repo meshtastic/firmware \
            --pattern 'source.tar.gz' --output meshtastic.tar.gz || true

          # Extract if downloaded
          if [ -f meshtastic.tar.gz ]; then
            mkdir -p meshtastic
            tar -xzf meshtastic.tar.gz -C meshtastic --strip-components=1
            rm meshtastic.tar.gz
          else
            # Fallback: clone repo at release tag
            git clone --branch "$RELEASE" --depth 1 https://github.com/meshtastic/firmware.git meshtastic
          fi

      - name: Check for SquirrelCore variant directory
        id: check_variant_dir
        run: |
          set -e
          echo "Checking for SquirrelCore variant files..."
          if [ -d "firmware/variants/SquirrelCore" ]; then
            echo "SquirrelCore variant directory found at firmware/variants/SquirrelCore"
            echo "variant_dir_exists=true" >> $GITHUB_OUTPUT
          else
            echo "SquirrelCore variant directory not found at firmware/variants/SquirrelCore. Skipping build."
            echo "variant_dir_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Add custom SquirrelCore variant
        id: add_variant
        if: ${{ steps.check_variant_dir.outputs.variant_dir_exists == 'true' }}
        run: |
          set -e
          echo "Copying SquirrelCore variant to meshtastic/variants/"
          cp -r firmware/variants/SquirrelCore meshtastic/variants/
          if [ -f "firmware/squirrelcore_env.ini" ]; then
            echo "Appending SquirrelCore environment to platformio.ini"
            cat firmware/squirrelcore_env.ini >> meshtastic/platformio.ini
            echo "env_added=true" >> $GITHUB_OUTPUT
          else
            echo "firmware/squirrelcore_env.ini not found. Skipping environment append."
            echo "env_added=false" >> $GITHUB_OUTPUT
          fi

      - name: Check for SquirrelCore environment
        id: check_variant
        if: ${{ steps.check_variant_dir.outputs.variant_dir_exists == 'true' }}
        run: |
          set -e
          if grep -q '^\[env:SquirrelCore\]' meshtastic/platformio.ini; then
            echo "SquirrelCore environment found in platformio.ini"
            echo "variant_exists=true" >> $GITHUB_OUTPUT
          else
            echo "SquirrelCore environment not found in platformio.ini. Skipping build."
            echo "variant_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build SquirrelCore firmware
        if: ${{ steps.check_variant_dir.outputs.variant_dir_exists == 'true' && steps.check_variant.outputs.variant_exists == 'true' }}
        working-directory: meshtastic
        run: |
          pio run -e SquirrelCore

      - name: Release SquirrelCore firmware
        if: ${{ steps.check_variant_dir.outputs.variant_dir_exists == 'true' && steps.check_variant.outputs.variant_exists == 'true' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ steps.get_version.outputs.meshtastic_version }}
          gh release create "SquirrelCore-$VERSION" --title "SquirrelCore $VERSION" --notes "Built from Meshtastic $VERSION" --repo ${{ github.repository }}
          gh release upload "SquirrelCore-$VERSION" meshtastic/.pio/build/SquirrelCore/firmware.bin --clobber --repo ${{ github.repository }}
```
