name: Build and Release SquirrelCore Firmware

on:
  workflow_dispatch:
  schedule:
    - cron: "0 6 * * *" # daily at 6 AM UTC

jobs:
  build-release:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Create firmware folder
      - name: Create firmware folder
        run: mkdir -p ${{ github.workspace }}/firmware

      # 3. Install dependencies (PlatformIO only)
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git python3 python3-pip
          pip install -U platformio

      # 4. Fetch latest stable Meshtastic release
      - name: Fetch latest Meshtastic release
        id: meshtastic_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        working-directory: ${{ github.workspace }}/firmware
        run: |
          rm -rf meshtastic
          # Get latest non-dev tag
          LATEST_TAG=$(gh release list --repo meshtastic/firmware --limit 20 \
            | grep -v "dev" | grep -m1 -oP '^v[0-9]+\.[0-9]+\.[0-9]+')
          echo "Latest Meshtastic release: $LATEST_TAG"
          echo "meshtastic_version=$LATEST_TAG" >> $GITHUB_OUTPUT
          # Download and extract
          gh release download "$LATEST_TAG" --repo meshtastic/firmware \
            --pattern 'source.tar.gz' --output meshtastic.tar.gz
          mkdir meshtastic
          tar -xzf meshtastic.tar.gz -C meshtastic --strip-components=1
          rm meshtastic.tar.gz

      # 5. Sync SquirrelCore variant if present
      - name: Sync SquirrelCore variant
        run: |
          VARIANT_SRC=${{ github.workspace }}/firmware/variants/SquirrelCore
          VARIANT_DST=${{ github.workspace }}/firmware/meshtastic/variants/SquirrelCore
          if [ -d "$VARIANT_SRC" ]; then
            echo "SquirrelCore variant found, syncing..."
            mkdir -p $VARIANT_DST
            rsync -av --delete "$VARIANT_SRC/" "$VARIANT_DST/"
          else
            echo "SquirrelCore variant folder not found, skipping build."
            exit 0

      # 6. Build firmware
      - name: Build SquirrelCore firmware
        if: ${{ success() }}
        working-directory: ${{ github.workspace }}/firmware/meshtastic
        run: |
          if [ -d "${{ github.workspace }}/firmware/variants/SquirrelCore" ]; then
            echo "Building firmware for SquirrelCore..."
            platformio run -e SquirrelCore
          else
            echo "SquirrelCore variant folder missing, skipping build."
            exit 0

      # 7. Create GitHub Release
      - name: Create GitHub Release
        if: ${{ success() }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "SquirrelCore-${{ steps.meshtastic_release.outputs.meshtastic_version }}"
          release_name: "SquirrelCore firmware ${{ steps.meshtastic_release.outputs.meshtastic_version }}"
          body: "Automated firmware build for SquirrelCore based on Meshtastic ${{ steps.meshtastic_release.outputs.meshtastic_version }}"
          draft: false
          prerelease: false

      # 8. Upload firmware binaries to the release
      - name: Upload firmware assets
        if: ${{ success() }}
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            ${{ github.workspace }}/firmware/meshtastic/.pio/build/SquirrelCore/firmware.uf2
            ${{ github.workspace }}/firmware/meshtastic/.pio/build/SquirrelCore/firmware.bin
            ${{ github.workspace }}/firmware/meshtastic/.pio/build/SquirrelCore/firmware.elf
